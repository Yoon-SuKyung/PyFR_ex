; cd ~/program/pyfr_13/airfoil/SD7003/excoarse
; pyfr import triangular_p4.msh triangular_p4_par4.pyfrm
; pyfr partition 4 triangular_p4_par4.pyfrm .

; pyfr run -b cuda -p triangular_p4_par4.pyfrm triangular_aoa6.ini
; mpirun -np 4 pyfr run -b cuda -p triangular_p4_par4.pyfrm triangular_aoa6.ini

; mpirun -np 4 pyfr restart -b cuda -p triangular_p4_par4.pyfrm  10.00.pyfrs triangular_aoa6.ini

; pyfr export triangular_p4_par4.pyfrm 0.0005.pyfrs 0.0005.vtu
; pyfr export --order 4 triangular_p4_par4.pyfrm 10.00.pyfrs 10.00.vtu

;[backend]
;precision = double
;rank-allocator = linear

[backend]
precision = single ;double
rank-allocator = linear

[backend-cuda]
device-id = local-rank ;round-robin
;mpi-type = cuda-aware ;standard


[constants]
gamma = 1.2941
Pr = 0.72

;Mach=0.2 ; v=47.0692
Uin = 47.0692 ;m/s
Vin = 0.0
w=0.0

Pc = 154.127 ;pa
rhoc=3.5852e-3 ;kg/m^3

;Re = 15000
mu = 0.00001370e-5
cpTref =230400 ;j~ * K
cpTs = 187359

[solver]
system = navier-stokes ;compressible n-s
order = 4 ;order of polynomial solution basis
;anti-alias = flux
viscosity-correction = sutherland ;none
;shock-capturing = none ;artificial-viscosity

[solver-time-integrator]
formulation = dual
scheme = backward-euler ;sdirk33 ;sdirk34
pseudo-scheme = euler ;
tstart = 0.0
tend =0.25
dt =1e-6 ;0.00005
pseudo-dt = 5e-8 ;0.000002
controller = none
pseudo-niters-min = 1
pseudo-niters-max = 10
pseudo-resid-norm = l2 ;uniform ;l2
pseudo-resid-tol = 1e-5 ;1e-8 ;
;pseudo-resid-tol-p = 1.0 ;;;;;;
pseudo-controller = none  ;local-pi ;
;atol = 1e-6 ;1e-3
;safety-fact = 0.9
;min-fact = 0.99 ;0.3
;max-fact = 1.005 ;2.5
;pseudo-dt-max-mult = 2.5

;[solver-time-integrator]
;formulation = std
;scheme = rk34 ;euler
;tstart = 0.0
;tend =0.25
;dt = 0.001 ;1e-7 ;0.00001 ;0.00005
;controller=  pi ;none
;atol = 1e-3 ;1e-6
;rtol = 1e-3 ;1e-6
;errest-norm = l2
;safety-fact = 0.9
;min-fact = 0.3
;max-fact = 2.5
;dt-max=0.001



[solver-dual-time-integrator-multip]
pseudo-dt-fact = 2.3
;;cycle = [(1, 1)]
;;cycle = [(2, 1), (1, 1), (0, 2), (1, 1), (2, 1)]
;;cycle = [(3, 1), (2, 1), (1, 1), (0, 2), (1, 1), (2, 1), (3, 3)]
;;cycle = [(3, 1), (2, 2), (1, 4), (0, 8), (1, 4), (2, 2), (3, 1)]
;cycle = [(4, 1), (3, 1), (2, 1), (1, 1), (0, 5), (1, 2), (2, 2), (3, 2), (4, 4)] ;working p4

cycle = [(4, 1), (3, 1), (2, 1), (1, 1), (0, 10), (1, 2), (2, 2), (3, 2), (4, 4)] ;working p4

[solver-interfaces]
riemann-solver = rusanov
ldg-beta = 0.5 ;0.5 ;idk
ldg-tau = 0.1 ;0.1 ;idk


[soln-plugin-sampler-1]
nsteps=10
samp-pts = [(-0.85,0.05,0)]
format = primitive
file = point-data_1.csv
header = true

[soln-plugin-sampler-2]
nsteps=10
samp-pts = [(-0.3,0.06,0)]
format = primitive
file = point-data_2.csv
header = true

[soln-plugin-sampler-3]
nsteps=10
samp-pts = [(0.15,0.03,0)]
format = primitive
file = point-data_3.csv
header = true

[soln-plugin-sampler-4]
nsteps=10
samp-pts = [(-0.85,0.05,0)]
format = conservative
file = point-data_4.csv
header = true

[soln-plugin-sampler-5]
nsteps=10
samp-pts = [(-0.3,0.06,0)]
format = conservative
file = point-data_5.csv
header = true

[soln-plugin-sampler-6]
nsteps=10
samp-pts = [(0.15,0.03,0)]
format = conservative
file = point-data_6.csv
header = true

[solver-interfaces-line]
flux-pts = gauss-legendre
quad-deg = 11
quad-pts = gauss-legendre

[solver-interfaces-tri]
flux-pts = williams-shunn
quad-deg = 11
quad-pts = williams-shunn

[solver-interfaces-quad]
flux-pts = gauss-legendre
quad-deg = 11
quad-pts = gauss-legendre

[solver-elements-tri]
soln-pts = williams-shunn

[solver-elements-quad]
soln-pts = gauss-legendre

[solver-elements-hex]
soln-pts = gauss-legendre
quad-deg = 11
quad-pts = gauss-legendre

[solver-elements-tet]
soln-pts = shunn-ham
quad-deg = 11
quad-pts = shunn-ham

[solver-elements-pri]
soln-pts = williams-shunn~gauss-legendre
quad-deg = 11
quad-pts = williams-shunn~gauss-legendre

[solver-elements-pyr]
soln-pts = gauss-legendre
quad-deg = 11
quad-pts = witherden-vincent



[soln-plugin-writer]
dt-out = 0.01
basedir = .
basename = {t:.2f}

[soln-plugin-nancheck]
nsteps = 1


;[soln-plugin-residual]
;nsteps = 10
;file = residual.csv
;header = true

[soln-plugin-pseudostats]
flushsteps = 10
file = residual.csv
header = true

[soln-plugin-fluidforce-upper]
nsteps = 10
file = upper_forces.csv
header = true
morigin = (0.0, 0.0, 0.0)

[soln-plugin-fluidforce-lower]
nsteps = 10
file = lower_forces.csv
header = true
morigin = (0.0, 0.0, 0.0)


[soln-bcs-inlet]
type = char-riem-inv
rho = rhoc
u = Uin
v = Vin
w = 0
p = Pc


[soln-bcs-outlet]
type = char-riem-inv
rho = rhoc
u = Uin
v = Vin
w = 0
p = Pc


[soln-bcs-upper]
type = no-slp-adia-wall

[soln-bcs-lower]
type = no-slp-adia-wall

[soln-ics]
rho = rhoc
u = Uin
v = Vin
w = 0
p = Pc








