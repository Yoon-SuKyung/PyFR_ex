
[backend]
precision = single ;double
rank-allocator = linear

[backend-cuda]
device-id = local-rank ;round-robin
;mpi-type = cuda-aware ;standard


[constants]
gamma = 1.2941
Pr = 0.72


; aoa = 10 ; 
Uin = 185.416386 ; 
Vin = 32.693911 ; 

; aoa = 20 ; 
; Uin = 176.922256 ; 
; Vin = 64.394435 ; 

w = 0.0

Pc = 64.21955525 ;pa
rhoc= 0.001500451 ;kg/m^3

mu = 1.370e-5
cpTref =230401 ;j~ * K
cpTs = 187359.12

[solver]
system = navier-stokes ;compressible n-s
order = 1 ;order of polynomial solution basis
;anti-alias = flux
viscosity-correction = sutherland ;none
shock-capturing = entropy-filter ;artificial-viscosity ;none

[solver-entropy-filter]
d-min = 1e-6
p-min = 1e-6
e-tol = 1e-4

;[solver-artificial-viscosity]
;max-artvisc = 0.01
;s0 = 0.01
;kappa = 5.0

[solver-time-integrator]

formulation = std
scheme = rk4
controller = none
tstart = 0.0
tend = 1.001
dt = 1e-6



[solver-interfaces]
riemann-solver = hllc
ldg-beta = 0.5
ldg-tau = 0.1


[solver-interfaces-line]
flux-pts = gauss-legendre-lobatto
quad-deg = 7
quad-pts = gauss-legendre-lobatto

[solver-interfaces-tri]
flux-pts = williams-shunn
quad-deg = 7
quad-pts = williams-shunn

[solver-interfaces-quad]
flux-pts = gauss-legendre-lobatto
quad-deg = 7
quad-pts = gauss-legendre-lobatto

[solver-elements-tri]
soln-pts = williams-shunn

[solver-elements-quad]
soln-pts = gauss-legendre-lobatto

[solver-elements-hex]
soln-pts = gauss-legendre-lobatto
quad-deg = 7
quad-pts = gauss-legendre-lobatto

[solver-elements-tet]
soln-pts = shunn-ham
quad-deg = 7
quad-pts = shunn-ham

[solver-elements-pri]
soln-pts = williams-shunn~gauss-legendre-lobatto
quad-deg = 7
quad-pts = williams-shunn~gauss-legendre-lobatto

[solver-elements-pyr]
soln-pts = gauss-legendre-lobatto
quad-deg = 7
quad-pts = witherden-vincent



[soln-plugin-writer]
dt-out = 0.02
basedir = .
basename = {t:.2f}


[soln-plugin-tavg-1]
nsteps = 10
dt-out = 0.5
tstart = 2.6
mode = continuous
basedir = .
basename = tavg-{t:04.2f}

avg-p = p
avg-u = u
avg-v = v
;avg-w = w

avg-pp = p*p
avg-uu = u*u
avg-uv = u*v
;avg-uw = u*w
avg-vv = v*v
;avg-vw = v*w
;avg-ww = w*w

fun-avg-upup = uu - u*u
fun-avg-upvp = uv - u*v
;fun-avg-upwp = uw - u*w
fun-avg-vpvp = vv - v*v
;fun-avg-vpwp = vw - v*w
;fun-avg-wpwp = ww - w*w
fun-avg-urms = sqrt(uu - u*u + vv - v*v)
;fun-avg-urms = sqrt(uu - u*u + vv - v*v +ww - w*w)



[soln-plugin-nancheck]
nsteps = 10


;[soln-plugin-residual]
;nsteps = 10
;file = residual.csv
;header = true

[soln-plugin-pseudostats]
flushsteps = 10
file = residual.csv
header = true

[soln-plugin-fluidforce-upper]
nsteps = 10
file = upper_forces.csv
header = true
morigin = (0.0, 0.0, 0.0)

[soln-plugin-fluidforce-lower]
nsteps = 10
file = lower_forces.csv
header = true
morigin = (0.0, 0.0, 0.0)


[soln-bcs-inlet]
type = char-riem-inv
rho = rhoc
u = Uin
v = Vin
w = 0
p = Pc


[soln-bcs-outlet]
type = char-riem-inv
rho = rhoc
u = Uin
v = Vin
w = 0
p = Pc


[soln-bcs-upper]
type = no-slp-adia-wall

[soln-bcs-lower]
type = no-slp-adia-wall

[soln-ics]
rho = rhoc
u = Uin
v = Vin
w = 0
p = Pc








